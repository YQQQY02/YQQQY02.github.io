{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Wagtail ecommerce Documentation For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} C -->|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car] Quick install Run the following commands in a virtual environment of your choice: pip install wagtail (Installing wagtail outside a virtual environment may require sudo. sudo is a program to run other programs with the security privileges of another user, by default the superuser) Once installed, Wagtail provides a command similar to Django\u2019s django-admin startproject to generate a new site/project: wagtail start mysite This will create a new folder mysite, based on a template containing everything you need to get started. More information on that template is available in the project template reference. Inside your mysite folder, run the setup steps necessary for any Django project: pip install -r requirements.txt python manage.py migrate python manage.py createsuperuser python manage.py runserver Your site is now accessible at http://localhost:8000, with the admin backend available at http://localhost:8000/admin/. This will set you up with a new stand-alone Wagtail project. If you\u2019d like to add Wagtail to an existing Django project instead, see Integrating Wagtail into a Django project.","title":"Home"},{"location":"#welcome-to-wagtail-ecommerce-documentation","text":"For full documentation visit mkdocs.org .","title":"Welcome to Wagtail ecommerce Documentation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. graph TD A[Christmas] -->|Get money| B(Go shopping) B --> C{Let me think} C -->|One| D[Laptop] C -->|Two| E[iPhone] C -->|Three| F[fa:fa-car Car]","title":"Project layout"},{"location":"#quick-install","text":"Run the following commands in a virtual environment of your choice: pip install wagtail (Installing wagtail outside a virtual environment may require sudo. sudo is a program to run other programs with the security privileges of another user, by default the superuser) Once installed, Wagtail provides a command similar to Django\u2019s django-admin startproject to generate a new site/project: wagtail start mysite This will create a new folder mysite, based on a template containing everything you need to get started. More information on that template is available in the project template reference. Inside your mysite folder, run the setup steps necessary for any Django project: pip install -r requirements.txt python manage.py migrate python manage.py createsuperuser python manage.py runserver Your site is now accessible at http://localhost:8000, with the admin backend available at http://localhost:8000/admin/. This will set you up with a new stand-alone Wagtail project. If you\u2019d like to add Wagtail to an existing Django project instead, see Integrating Wagtail into a Django project.","title":"Quick install"},{"location":"about/","text":"Install and run Wagtail -> Install dependencies Wagtail supports Python 3.7, 3.8, 3.9, 3.10, and 3.11. To check whether you have an appropriate version of Python 3: python --version -> Create and activate a virtual environment We recommend using a virtual environment, which isolates installed dependencies from other projects. This tutorial uses venv, which is packaged with Python 3. On Windows (cmd.exe): py -m venv mysite\\env mysite\\env\\Scripts\\activate.bat # or: mysite\\env\\Scripts\\activate -> Install Wagtail Use pip, which is packaged with Python, to install Wagtail and its dependencies: pip install wagtail -> Generate your site Wagtail provides a start command similar to django-admin startproject. Running wagtail start mysite in your project will generate a new mysite folder with a few Wagtail-specific extras, including the required project settings, a \u201chome\u201d app with a blank HomePage model and basic templates, and a sample \u201csearch\u201d app. Because the folder mysite was already created by venv, run wagtail start with an additional argument to specify the destination directory: wagtail start mysite mysite -> Install project dependencies cd mysite pip install -r requirements.txt This ensures that you have the relevant versions of Wagtail, Django, and any other dependencies for the project you have just created. The requirements.txt file contains all the dependencies needed in order to run the project. -> Create the database python manage.py makemigrations python manage.py migrate This command ensures that the tables in your database are matched to the models in your project. Every time you alter your model (for example you may add a field to a model) you will need to run this command in order to update the database. -> Create an admin user python manage.py createsuperuser When logged into the admin site, a superuser has full permissions and is able to view/create/manage the database. -> Start the server python manage.py runserver If everything worked, http://127.0.0.1:8000 will show you a welcome page:","title":"About"},{"location":"about/#install-and-run-wagtail","text":"","title":"Install and run Wagtail"},{"location":"about/#-install-dependencies","text":"Wagtail supports Python 3.7, 3.8, 3.9, 3.10, and 3.11. To check whether you have an appropriate version of Python 3: python --version","title":"-&gt; Install dependencies"},{"location":"about/#-create-and-activate-a-virtual-environment","text":"We recommend using a virtual environment, which isolates installed dependencies from other projects. This tutorial uses venv, which is packaged with Python 3. On Windows (cmd.exe): py -m venv mysite\\env mysite\\env\\Scripts\\activate.bat # or: mysite\\env\\Scripts\\activate","title":"-&gt; Create and activate a virtual environment"},{"location":"about/#-install-wagtail","text":"Use pip, which is packaged with Python, to install Wagtail and its dependencies: pip install wagtail","title":"-&gt; Install Wagtail"},{"location":"about/#-generate-your-site","text":"Wagtail provides a start command similar to django-admin startproject. Running wagtail start mysite in your project will generate a new mysite folder with a few Wagtail-specific extras, including the required project settings, a \u201chome\u201d app with a blank HomePage model and basic templates, and a sample \u201csearch\u201d app. Because the folder mysite was already created by venv, run wagtail start with an additional argument to specify the destination directory: wagtail start mysite mysite","title":"-&gt; Generate your site"},{"location":"about/#-install-project-dependencies","text":"cd mysite pip install -r requirements.txt This ensures that you have the relevant versions of Wagtail, Django, and any other dependencies for the project you have just created. The requirements.txt file contains all the dependencies needed in order to run the project.","title":"-&gt; Install project dependencies"},{"location":"about/#-create-the-database","text":"python manage.py makemigrations python manage.py migrate This command ensures that the tables in your database are matched to the models in your project. Every time you alter your model (for example you may add a field to a model) you will need to run this command in order to update the database.","title":"-&gt; Create the database"},{"location":"about/#-create-an-admin-user","text":"python manage.py createsuperuser When logged into the admin site, a superuser has full permissions and is able to view/create/manage the database.","title":"-&gt; Create an admin user"},{"location":"about/#-start-the-server","text":"python manage.py runserver If everything worked, http://127.0.0.1:8000 will show you a welcome page:","title":"-&gt; Start the server"}]}